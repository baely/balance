// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package model

import (
	"time"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// AccountResource Provides information about an Up bank account.
type AccountResource struct {
	Attributes struct {
		// AccountType The bank account type of this account.
		AccountType AccountTypeEnum `json:"accountType"`

		// Balance The available balance of the account, taking into account any amounts
		// that are currently on hold.
		Balance MoneyObject `json:"balance"`

		// CreatedAt The date-time at which this account was first opened.
		CreatedAt time.Time `json:"createdAt"`

		// DisplayName The name associated with the account in the Up application.
		DisplayName string `json:"displayName"`

		// OwnershipType The ownership structure for this account.
		OwnershipType OwnershipTypeEnum `json:"ownershipType"`
	} `json:"attributes"`

	// Id The unique identifier for this account.
	Id    string `json:"id"`
	Links *struct {
		// Self The canonical link to this resource within the API.
		Self string `json:"self"`
	} `json:"links,omitempty"`
	Relationships struct {
		Transactions struct {
			Links *struct {
				// Related The link to retrieve the related resource(s) in this relationship.
				Related string `json:"related"`
			} `json:"links,omitempty"`
		} `json:"transactions"`
	} `json:"relationships"`

	// Type The type of this resource: `accounts`
	Type string `json:"type"`
}

// AccountTypeEnum Specifies the type of bank account. Currently returned values are `SAVER`
// and `TRANSACTIONAL`.
type AccountTypeEnum = interface{}

// CashbackObject Provides information about an instant reimbursement in the form of
// cashback.
type CashbackObject struct {
	// Amount The total amount of cashback paid, represented as a positive value.
	Amount MoneyObject `json:"amount"`

	// Description A brief description of why this cashback was paid.
	Description string `json:"description"`
}

// CategoryInputResourceIdentifier Uniquely identifies a category in the API.
type CategoryInputResourceIdentifier struct {
	// Id The unique identifier of the category, as returned by the `/categories`
	// endpoint.
	Id string `json:"id"`

	// Type The type of this resource: `categories`
	Type string `json:"type"`
}

// CategoryResource Provides information about a category and its ancestry.
type CategoryResource struct {
	Attributes struct {
		// Name The name of this category as seen in the Up application.
		Name string `json:"name"`
	} `json:"attributes"`

	// Id The unique identifier for this category. This is a human-readable but
	// URL-safe value.
	Id    string `json:"id"`
	Links *struct {
		// Self The canonical link to this resource within the API.
		Self string `json:"self"`
	} `json:"links,omitempty"`
	Relationships struct {
		Children struct {
			Data []struct {
				// Id The unique identifier of the resource within its type.
				Id string `json:"id"`

				// Type The type of this resource: `categories`
				Type string `json:"type"`
			} `json:"data"`
			Links *struct {
				// Related The link to retrieve the related resource(s) in this relationship.
				Related string `json:"related"`
			} `json:"links,omitempty"`
		} `json:"children"`
		Parent struct {
			Data *struct {
				// Id The unique identifier of the resource within its type.
				Id string `json:"id"`

				// Type The type of this resource: `categories`
				Type string `json:"type"`
			} `json:"data"`
			Links *struct {
				// Related The link to retrieve the related resource(s) in this relationship.
				Related string `json:"related"`
			} `json:"links,omitempty"`
		} `json:"parent"`
	} `json:"relationships"`

	// Type The type of this resource: `categories`
	Type string `json:"type"`
}

// CreateWebhookRequest Request to create a new webhook. This currently only requires a `url`
// attribute.
type CreateWebhookRequest struct {
	// Data The webhook resource to create.
	Data WebhookInputResource `json:"data"`
}

// CreateWebhookResponse Successful response after creating a webhook.
type CreateWebhookResponse struct {
	// Data The webhook that was created.
	Data WebhookResource `json:"data"`
}

// ErrorObject Provides information about an error processing a request.
type ErrorObject struct {
	// Detail A detailed description of this error. This should be considered unique
	// to individual occurrences of an error and subject to change. It is
	// useful for debugging purposes.
	Detail string `json:"detail"`

	// Source If applicable, location in the request that this error relates to. This
	// may be a parameter in the query string, or a an attribute in the
	// request body.
	Source *struct {
		// Parameter If this error relates to a query parameter, the name of the
		// parameter.
		Parameter *string `json:"parameter,omitempty"`

		// Pointer If this error relates to an attribute in the request body, a
		// rfc-6901 JSON pointer to the attribute.
		Pointer *string `json:"pointer,omitempty"`
	} `json:"source,omitempty"`

	// Status The HTTP status code associated with this error. This can also be
	// obtained from the response headers. The status indicates the broad type
	// of error according to HTTP semantics.
	Status string `json:"status"`

	// Title A short description of this error. This should be stable across
	// multiple occurrences of this type of error and typically expands on the
	// reason for the status code.
	Title string `json:"title"`
}

// ErrorResponse Generic error response that returns one or more errors.
type ErrorResponse struct {
	// Errors The list of errors returned in this response.
	Errors []ErrorObject `json:"errors"`
}

// GetAccountResponse Successful response to get a single account.
type GetAccountResponse struct {
	// Data The account returned in this response.
	Data AccountResource `json:"data"`
}

// GetCategoryResponse Successful response to get a single category and its ancestry.
type GetCategoryResponse struct {
	// Data The category returned in this response.
	Data CategoryResource `json:"data"`
}

// GetTransactionResponse Successful response to get a single transaction.
type GetTransactionResponse struct {
	// Data The transaction returned in this response.
	Data TransactionResource `json:"data"`
}

// GetWebhookResponse Successful response to get a single webhook.
type GetWebhookResponse struct {
	// Data The webhook returned in this response.
	Data WebhookResource `json:"data"`
}

// HoldInfoObject Provides information about the amount at which a transaction was in the
// `HELD` status.
type HoldInfoObject struct {
	// Amount The amount of this transaction while in the `HELD` status, in
	// Australian dollars.
	Amount MoneyObject `json:"amount"`

	// ForeignAmount The foreign currency amount of this transaction while in the `HELD`
	// status. This field will be `null` for domestic transactions. The amount
	// was converted to the AUD amount reflected in the `amount` field.
	ForeignAmount *MoneyObject `json:"foreignAmount"`
}

// ListAccountsResponse Successful response to get all accounts. This returns a paginated list of
// accounts, which can be scrolled by following the `prev` and `next` links
// if present.
type ListAccountsResponse struct {
	// Data The list of accounts returned in this response.
	Data  []AccountResource `json:"data"`
	Links struct {
		// Next The link to the next page in the results. If this value is `null`
		// there is no next page.
		Next *string `json:"next"`

		// Prev The link to the previous page in the results. If this value is `null`
		// there is no previous page.
		Prev *string `json:"prev"`
	} `json:"links"`
}

// ListCategoriesResponse Successful response to get all categories and their ancestry. The
// returned list is not paginated.
type ListCategoriesResponse struct {
	// Data The list of categories returned in this response.
	Data []CategoryResource `json:"data"`
}

// ListTagsResponse Successful response to get all tags. This returns a paginated list of
// tags, which can be scrolled by following the `prev` and `next` links if
// present.
type ListTagsResponse struct {
	// Data The list of tags returned in this response.
	Data  []TagResource `json:"data"`
	Links struct {
		// Next The link to the next page in the results. If this value is `null`
		// there is no next page.
		Next *string `json:"next"`

		// Prev The link to the previous page in the results. If this value is `null`
		// there is no previous page.
		Prev *string `json:"prev"`
	} `json:"links"`
}

// ListTransactionsResponse Successful response to get all transactions. This returns a paginated
// list of transactions, which can be scrolled by following the `prev` and
// `next` links if present.
type ListTransactionsResponse struct {
	// Data The list of transactions returned in this response.
	Data  []TransactionResource `json:"data"`
	Links struct {
		// Next The link to the next page in the results. If this value is `null`
		// there is no next page.
		Next *string `json:"next"`

		// Prev The link to the previous page in the results. If this value is `null`
		// there is no previous page.
		Prev *string `json:"prev"`
	} `json:"links"`
}

// ListWebhookDeliveryLogsResponse Successful response to get all delivery logs for a webhook. This returns
// a paginated list of delivery logs, which can be scrolled by following the
// `next` and `prev` links if present.
type ListWebhookDeliveryLogsResponse struct {
	// Data The list of delivery logs returned in this response.
	Data  []WebhookDeliveryLogResource `json:"data"`
	Links struct {
		// Next The link to the next page in the results. If this value is `null`
		// there is no next page.
		Next *string `json:"next"`

		// Prev The link to the previous page in the results. If this value is `null`
		// there is no previous page.
		Prev *string `json:"prev"`
	} `json:"links"`
}

// ListWebhooksResponse Successful response to get all webhooks. This returns a paginated list of
// webhooks, which can be scrolled by following the `prev` and `next` links
// if present.
type ListWebhooksResponse struct {
	// Data The list of webhooks returned in this response.
	Data  []WebhookResource `json:"data"`
	Links struct {
		// Next The link to the next page in the results. If this value is `null`
		// there is no next page.
		Next *string `json:"next"`

		// Prev The link to the previous page in the results. If this value is `null`
		// there is no previous page.
		Prev *string `json:"prev"`
	} `json:"links"`
}

// MoneyObject Provides information about a value of money.
type MoneyObject struct {
	// CurrencyCode The ISO 4217 currency code.
	CurrencyCode string `json:"currencyCode"`

	// Value The amount of money, formatted as a string in the relevant currency.
	// For example, for an Australian dollar value of $10.56, this field will
	// be `"10.56"`. The currency symbol is not included in the string.
	Value string `json:"value"`

	// ValueInBaseUnits The amount of money in the smallest denomination for the currency, as a
	// 64-bit integer.  For example, for an Australian dollar value of $10.56,
	// this field will be `1056`.
	ValueInBaseUnits int `json:"valueInBaseUnits"`
}

// OwnershipTypeEnum Specifies the structure under which a bank account is owned. Currently
// returned values are `INDIVIDUAL` and `JOINT`.
type OwnershipTypeEnum = interface{}

// PingResponse Basic ping response to verify authentication.
type PingResponse struct {
	Meta struct {
		// Id The unique identifier of the authenticated customer.
		Id string `json:"id"`

		// StatusEmoji A cute emoji that represents the response status.
		StatusEmoji string `json:"statusEmoji"`
	} `json:"meta"`
}

// RoundUpObject Provides information about how a Round Up was applied, such as whether or
// not a boost was included in the Round Up.
type RoundUpObject struct {
	// Amount The total amount of this Round Up, including any boosts, represented as
	// a negative value.
	Amount MoneyObject `json:"amount"`

	// BoostPortion The portion of the Round Up `amount` owing to boosted Round Ups,
	// represented as a negative value. If no boost was added to the Round Up
	// this field will be `null`.
	BoostPortion *MoneyObject `json:"boostPortion"`
}

// TagInputResourceIdentifier Uniquely identifies a single tag in the API.
type TagInputResourceIdentifier struct {
	// Id The label of the tag, which also acts as the tag’s unique identifier.
	Id string `json:"id"`

	// Type The type of this resource: `tags`
	Type string `json:"type"`
}

// TagResource Provides information about a tag.
type TagResource struct {
	// Id The label of the tag, which also acts as the tag’s unique identifier.
	Id            string `json:"id"`
	Relationships struct {
		Transactions struct {
			Links *struct {
				// Related The link to retrieve the related resource(s) in this relationship.
				Related string `json:"related"`
			} `json:"links,omitempty"`
		} `json:"transactions"`
	} `json:"relationships"`

	// Type The type of this resource: `tags`
	Type string `json:"type"`
}

// TransactionResource defines model for TransactionResource.
type TransactionResource struct {
	Attributes struct {
		// Amount The amount of this transaction in Australian dollars. For
		// transactions that were once `HELD` but are now `SETTLED`, refer to
		// the `holdInfo` field for the original `amount` the transaction was
		// `HELD` at.
		Amount MoneyObject `json:"amount"`

		// Cashback If all or part of this transaction was instantly reimbursed in the
		// form of cashback, details of the reimbursement.
		Cashback *CashbackObject `json:"cashback"`

		// CreatedAt The date-time at which this transaction was first encountered.
		CreatedAt time.Time `json:"createdAt"`

		// Description A short description for this transaction. Usually the merchant name
		// for purchases.
		Description string `json:"description"`

		// ForeignAmount The foreign currency amount of this transaction. This field will be
		// `null` for domestic transactions. The amount was converted to the AUD
		// amount reflected in the `amount` of this transaction. Refer to the
		// `holdInfo` field for the original `foreignAmount` the transaction was
		// `HELD` at.
		ForeignAmount *MoneyObject `json:"foreignAmount"`

		// HoldInfo If this transaction is currently in the `HELD` status, or was ever in
		// the `HELD` status, the `amount` and `foreignAmount` of the
		// transaction while `HELD`.
		HoldInfo *HoldInfoObject `json:"holdInfo"`

		// IsCategorizable Boolean flag set to true on transactions that support the use of
		// categories.
		IsCategorizable bool `json:"isCategorizable"`

		// Message Attached message for this transaction, such as a payment message, or a
		// transfer note.
		Message *string `json:"message"`

		// RawText The original, unprocessed text of the transaction. This is often not
		// a perfect indicator of the actual merchant, but it is useful for
		// reconciliation purposes in some cases.
		RawText *string `json:"rawText"`

		// RoundUp Details of how this transaction was rounded-up. If no Round Up was
		// applied this field will be `null`.
		RoundUp *RoundUpObject `json:"roundUp"`

		// SettledAt The date-time at which this transaction settled. This field will be
		// `null` for transactions that are currently in the `HELD` status.
		SettledAt *time.Time `json:"settledAt"`

		// Status The current processing status of this transaction, according to
		// whether or not this transaction has settled or is still held.
		Status TransactionStatusEnum `json:"status"`
	} `json:"attributes"`

	// Id The unique identifier for this transaction.
	Id    string `json:"id"`
	Links *struct {
		// Self The canonical link to this resource within the API.
		Self string `json:"self"`
	} `json:"links,omitempty"`
	Relationships struct {
		Account struct {
			Data struct {
				// Id The unique identifier of the resource within its type.
				Id string `json:"id"`

				// Type The type of this resource: `accounts`
				Type string `json:"type"`
			} `json:"data"`
			Links *struct {
				// Related The link to retrieve the related resource(s) in this relationship.
				Related string `json:"related"`
			} `json:"links,omitempty"`
		} `json:"account"`
		Category struct {
			Data *struct {
				// Id The unique identifier of the resource within its type.
				Id string `json:"id"`

				// Type The type of this resource: `categories`
				Type string `json:"type"`
			} `json:"data"`
			Links *struct {
				// Related The link to retrieve the related resource(s) in this relationship.
				Related *string `json:"related,omitempty"`

				// Self The link to retrieve or modify linkage between this resources and the
				// related resource(s) in this relationship.
				Self string `json:"self"`
			} `json:"links,omitempty"`
		} `json:"category"`
		ParentCategory struct {
			Data *struct {
				// Id The unique identifier of the resource within its type.
				Id string `json:"id"`

				// Type The type of this resource: `categories`
				Type string `json:"type"`
			} `json:"data"`
			Links *struct {
				// Related The link to retrieve the related resource(s) in this relationship.
				Related string `json:"related"`
			} `json:"links,omitempty"`
		} `json:"parentCategory"`
		Tags struct {
			Data []struct {
				// Id The label of the tag, which also acts as the tag’s unique identifier.
				Id string `json:"id"`

				// Type The type of this resource: `tags`
				Type string `json:"type"`
			} `json:"data"`
			Links *struct {
				// Self The link to retrieve or modify linkage between this resources and the
				// related resource(s) in this relationship.
				Self string `json:"self"`
			} `json:"links,omitempty"`
		} `json:"tags"`

		// TransferAccount If this transaction is a transfer between accounts, this relationship
		// will contain the account the transaction went to/came from. The
		// `amount` field can be used to determine the direction of the transfer.
		TransferAccount struct {
			Data *struct {
				// Id The unique identifier of the resource within its type.
				Id string `json:"id"`

				// Type The type of this resource: `accounts`
				Type string `json:"type"`
			} `json:"data"`
			Links *struct {
				// Related The link to retrieve the related resource(s) in this relationship.
				Related string `json:"related"`
			} `json:"links,omitempty"`
		} `json:"transferAccount"`
	} `json:"relationships"`

	// Type The type of this resource: `transactions`
	Type string `json:"type"`
}

// TransactionStatusEnum Specifies which stage of processing a transaction is currently at.
// Currently returned values are `HELD` and `SETTLED`. When a transaction is
// held, its account’s `availableBalance` is affected. When a transaction is
// settled, its account’s `currentBalance` is affected.
type TransactionStatusEnum = interface{}

// UpdateTransactionCategoryRequest Request to update the category associated with a transaction.
type UpdateTransactionCategoryRequest struct {
	// Data The category to set on the transaction. Set this entire key to `null`
	// de-categorize a transaction.
	Data *CategoryInputResourceIdentifier `json:"data"`
}

// UpdateTransactionTagsRequest Request to add or remove tags associated with a transaction.
type UpdateTransactionTagsRequest struct {
	// Data The tags to add to or remove from the transaction.
	Data []TagInputResourceIdentifier `json:"data"`
}

// WebhookDeliveryLogResource Provides historical webhook event delivery information for analysis and
// debugging purposes.
type WebhookDeliveryLogResource struct {
	Attributes struct {
		// CreatedAt The date-time at which this log entry was created.
		CreatedAt time.Time `json:"createdAt"`

		// DeliveryStatus The success or failure status of this delivery attempt.
		DeliveryStatus WebhookDeliveryStatusEnum `json:"deliveryStatus"`

		// Request Information about the request that was sent to the webhook URL.
		Request struct {
			// Body The payload that was sent in the request body.
			Body string `json:"body"`
		} `json:"request"`

		// Response Information about the response that was received from the webhook URL.
		Response *struct {
			// Body The payload that was received in the response body.
			Body string `json:"body"`

			// StatusCode The HTTP status code received in the response.
			StatusCode int `json:"statusCode"`
		} `json:"response"`
	} `json:"attributes"`

	// Id The unique identifier for this log entry.
	Id            string `json:"id"`
	Relationships struct {
		WebhookEvent struct {
			Data struct {
				// Id The unique identifier of the resource within its type.
				Id string `json:"id"`

				// Type The type of this resource: `webhook-events`
				Type string `json:"type"`
			} `json:"data"`
		} `json:"webhookEvent"`
	} `json:"relationships"`

	// Type The type of this resource: `webhook-delivery-logs`
	Type string `json:"type"`
}

// WebhookDeliveryStatusEnum Specifies the nature of the success or failure of a webhook delivery
// attempt to the subscribed webhook URL. The currently returned values are
// described below:
//
//   - **`DELIVERED`**: The event was delivered to the webhook URL
//     successfully and a `200` response was received.
//   - **`UNDELIVERABLE`**: The webhook URL was not reachable, or timed out.
//   - **`BAD_RESPONSE_CODE`**: The event was delivered to the webhook URL
//     but a non-`200` response was received.
type WebhookDeliveryStatusEnum = interface{}

// WebhookEventCallback Asynchronous callback request used for webhook event delivery.
type WebhookEventCallback struct {
	// Data The webhook event data sent to the subscribed webhook.
	Data WebhookEventResource `json:"data"`
}

// WebhookEventResource Provides the event data used in asynchronous webhook event callbacks to
// subscribed endpoints. Webhooks events have defined `eventType`s and may
// optionally relate to other resources within the Up API.
type WebhookEventResource struct {
	Attributes struct {
		// CreatedAt The date-time at which this event was generated.
		CreatedAt time.Time `json:"createdAt"`

		// EventType The type of this event. This can be used to determine what action to
		// take in response to the event.
		EventType WebhookEventTypeEnum `json:"eventType"`
	} `json:"attributes"`

	// Id The unique identifier for this event. This will remain constant across
	// delivery retries.
	Id            string `json:"id"`
	Relationships struct {
		Transaction *struct {
			Data struct {
				// Id The unique identifier of the resource within its type.
				Id string `json:"id"`

				// Type The type of this resource: `transactions`
				Type string `json:"type"`
			} `json:"data"`
			Links *struct {
				// Related The link to retrieve the related resource(s) in this relationship.
				Related string `json:"related"`
			} `json:"links,omitempty"`
		} `json:"transaction,omitempty"`
		Webhook struct {
			Data struct {
				// Id The unique identifier of the resource within its type.
				Id string `json:"id"`

				// Type The type of this resource: `webhooks`
				Type string `json:"type"`
			} `json:"data"`
			Links *struct {
				// Related The link to retrieve the related resource(s) in this relationship.
				Related string `json:"related"`
			} `json:"links,omitempty"`
		} `json:"webhook"`
	} `json:"relationships"`

	// Type The type of this resource: `webhook-events`
	Type string `json:"type"`
}

// WebhookEventTypeEnum Specifies the type of a webhook event. This can be used to determine what
// action to take in response to the event, such as which relationships to
// expect.
type WebhookEventTypeEnum = interface{}

// WebhookInputResource Represents a webhook specified as request input.
type WebhookInputResource struct {
	Attributes struct {
		// Description An optional description for this webhook, up to 64 characters in
		// length.
		Description *string `json:"description"`

		// Url The URL that this webhook should post events to. This must be a valid
		// HTTP or HTTPS URL that does not exceed 300 characters in length.
		Url string `json:"url"`
	} `json:"attributes"`
}

// WebhookResource Provides information about a webhook.
type WebhookResource struct {
	Attributes struct {
		// CreatedAt The date-time at which this webhook was created.
		CreatedAt time.Time `json:"createdAt"`

		// Description An optional description that was provided at the time the webhook was
		// created.
		Description *string `json:"description"`

		// SecretKey A shared secret key used to sign all webhook events sent to the
		// configured webhook URL. This field is returned only once, upon the
		// initial creation of the webhook. If lost, create a new webhook and
		// delete this webhook.
		//
		// The webhook URL receives a request with a
		// `X-Up-Authenticity-Signature` header, which is the SHA-256 HMAC of
		// the entire raw request body signed using this `secretKey`. It is
		// advised to compute and check this signature to verify the
		// authenticity of requests sent to the webhook URL. See
		// [Handling webhook events](#callback_post_webhookURL) for full
		// details.
		SecretKey *string `json:"secretKey,omitempty"`

		// Url The URL that this webhook is configured to `POST` events to.
		Url string `json:"url"`
	} `json:"attributes"`

	// Id The unique identifier for this webhook.
	Id    string `json:"id"`
	Links *struct {
		// Self The canonical link to this resource within the API.
		Self string `json:"self"`
	} `json:"links,omitempty"`
	Relationships struct {
		Logs struct {
			Links *struct {
				// Related The link to retrieve the related resource(s) in this relationship.
				Related string `json:"related"`
			} `json:"links,omitempty"`
		} `json:"logs"`
	} `json:"relationships"`

	// Type The type of this resource: `webhooks`
	Type string `json:"type"`
}

// GetAccountsParams defines parameters for GetAccounts.
type GetAccountsParams struct {
	// PageSize The number of records to return in each page.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// FilterAccountType The type of account for which to return records. This
	// can be used to filter Savers from spending accounts.
	FilterAccountType *AccountTypeEnum `form:"filter[accountType],omitempty" json:"filter[accountType],omitempty"`

	// FilterOwnershipType The account ownership structure for which to return
	// records. This can be used to filter 2Up accounts from Up
	// accounts.
	FilterOwnershipType *OwnershipTypeEnum `form:"filter[ownershipType],omitempty" json:"filter[ownershipType],omitempty"`
}

// GetAccountsAccountIdTransactionsParams defines parameters for GetAccountsAccountIdTransactions.
type GetAccountsAccountIdTransactionsParams struct {
	// PageSize The number of records to return in each page.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// FilterStatus The transaction status for which to return records. This
	// can be used to filter `HELD` transactions from those
	// that are `SETTLED`.
	FilterStatus *TransactionStatusEnum `form:"filter[status],omitempty" json:"filter[status],omitempty"`

	// FilterSince The start date-time from which to return records,
	// formatted according to rfc-3339. Not to be used for
	// pagination purposes.
	FilterSince *time.Time `form:"filter[since],omitempty" json:"filter[since],omitempty"`

	// FilterUntil The end date-time up to which to return records,
	// formatted according to rfc-3339. Not to be used for
	// pagination purposes.
	FilterUntil *time.Time `form:"filter[until],omitempty" json:"filter[until],omitempty"`

	// FilterCategory The category identifier for which to filter transactions.
	// Both parent and child categories can be filtered through
	// this parameter. Providing an invalid category identifier
	// results in a `404` response.
	FilterCategory *string `form:"filter[category],omitempty" json:"filter[category],omitempty"`

	// FilterTag A transaction tag to filter for which to return records.
	// If the tag does not exist, zero records are returned and
	// a success response is given.
	FilterTag *string `form:"filter[tag],omitempty" json:"filter[tag],omitempty"`
}

// GetCategoriesParams defines parameters for GetCategories.
type GetCategoriesParams struct {
	// FilterParent The unique identifier of a parent category for which to
	// return only its children. Providing an invalid category
	// identifier results in a `404` response.
	FilterParent *string `form:"filter[parent],omitempty" json:"filter[parent],omitempty"`
}

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {
	// PageSize The number of records to return in each page.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// GetTransactionsParams defines parameters for GetTransactions.
type GetTransactionsParams struct {
	// PageSize The number of records to return in each page.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// FilterStatus The transaction status for which to return records. This
	// can be used to filter `HELD` transactions from those
	// that are `SETTLED`.
	FilterStatus *TransactionStatusEnum `form:"filter[status],omitempty" json:"filter[status],omitempty"`

	// FilterSince The start date-time from which to return records,
	// formatted according to rfc-3339. Not to be used for
	// pagination purposes.
	FilterSince *time.Time `form:"filter[since],omitempty" json:"filter[since],omitempty"`

	// FilterUntil The end date-time up to which to return records,
	// formatted according to rfc-3339. Not to be used for
	// pagination purposes.
	FilterUntil *time.Time `form:"filter[until],omitempty" json:"filter[until],omitempty"`

	// FilterCategory The category identifier for which to filter transactions.
	// Both parent and child categories can be filtered through
	// this parameter. Providing an invalid category identifier
	// results in a `404` response.
	FilterCategory *string `form:"filter[category],omitempty" json:"filter[category],omitempty"`

	// FilterTag A transaction tag to filter for which to return records.
	// If the tag does not exist, zero records are returned and
	// a success response is given.
	FilterTag *string `form:"filter[tag],omitempty" json:"filter[tag],omitempty"`
}

// GetWebhooksParams defines parameters for GetWebhooks.
type GetWebhooksParams struct {
	// PageSize The number of records to return in each page.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// GetWebhooksWebhookIdLogsParams defines parameters for GetWebhooksWebhookIdLogs.
type GetWebhooksWebhookIdLogsParams struct {
	// PageSize The number of records to return in each page.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`
}

// PatchTransactionsTransactionIdRelationshipsCategoryJSONRequestBody defines body for PatchTransactionsTransactionIdRelationshipsCategory for application/json ContentType.
type PatchTransactionsTransactionIdRelationshipsCategoryJSONRequestBody = UpdateTransactionCategoryRequest

// DeleteTransactionsTransactionIdRelationshipsTagsJSONRequestBody defines body for DeleteTransactionsTransactionIdRelationshipsTags for application/json ContentType.
type DeleteTransactionsTransactionIdRelationshipsTagsJSONRequestBody = UpdateTransactionTagsRequest

// PostTransactionsTransactionIdRelationshipsTagsJSONRequestBody defines body for PostTransactionsTransactionIdRelationshipsTags for application/json ContentType.
type PostTransactionsTransactionIdRelationshipsTagsJSONRequestBody = UpdateTransactionTagsRequest

// PostWebhooksJSONRequestBody defines body for PostWebhooks for application/json ContentType.
type PostWebhooksJSONRequestBody = CreateWebhookRequest
